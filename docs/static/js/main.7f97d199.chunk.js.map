{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","placeholder","getGifts","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAKaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAE3B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAoBA,OACI,sBAAMC,SAdW,SAAEC,GACnBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAG5BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAOlB,SACI,uBACIO,KAAO,OACPC,MAAST,EACTU,SAvBc,SAAEP,GACxBF,EAAcE,EAAEQ,OAAOF,QAuBfG,YAAY,sB,+BC9BfC,EAAQ,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAGdC,EAHc,iDAGkCC,UAClDH,GAJgB,+DAQDI,MAAMF,GARL,cAQdG,EARc,gBASGA,EAAKC,OATR,uBASZC,EATY,EASZA,KAGFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAhBtB,kBAqBbM,GArBa,4CAAH,sDCARO,EAAc,SAAC,GAAqB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAElC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAQf,EAAMgB,IAAQN,IAC3B,0CAAaA,EAAb,WCFCO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAEtB,ECJwB,SAAEA,GAE1B,MAA0Bf,mBAAS,CAE/BsB,KAAM,GACNa,SAAS,IAHb,mBAAOC,EAAP,KAAcC,EAAd,KAqBA,OAfAC,qBAAW,WAGPxB,EAAUC,GACLwB,MAAM,SAAAC,GAECH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAK1B,CAAEpB,IAEEqB,EDnB0BK,CAAc1B,GAAlCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAGrB,OACI,qCACI,qBAAIJ,UAAU,oCAAd,cAAsDhB,EAAtD,OAEEoB,GAAW,mBAAGJ,UAAU,mCAAb,sBAEb,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAESA,GADAA,EAAIC,aEhBxBgB,EAAe,WAGxB,MAAoC1C,mBAAS,CAAC,oBAA9C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAUA,OACI,qCACI,uDACA,cAAC,EAAD,CAAaA,cAAkBA,IAC/B,uBAGA,6BAEQ4C,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAaA,GADLA,Y,MCrBpC6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.7f97d199.chunk.js","sourcesContent":["//rafc\r\nimport React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport const AddCategory = ( { setCategories } ) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = ( e ) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    //Manejar el enter\r\n    const handleSubmit = ( e ) => {\r\n        e.preventDefault();\r\n\r\n        if ( inputValue.trim().length > 2 ){\r\n\r\n            //si el inputValue sacando los espacios es mayor que 2\r\n            setCategories( cats => [ inputValue, ...cats ] );\r\n            setInputValue('');\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input \r\n                type  ='text'\r\n                value ={ inputValue }\r\n                onChange = { handleInputChange }\r\n                placeholder=\"Busca tus gifs\"\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\n//PropTypes = para obligar que se envíe una categoría (necesita que se envie una funcion)\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","\r\n\r\n// 1. Recibe la categoría y hace una petición https (fetch)\r\nexport const getGifts = async (category) => {\r\n    // 2. Petición https en postman se configuran los parametros que se necesitan y se genera la url que se usara en la petición https.\r\n    // encodeURI = sirve para reemplazar los espacios por otros simbolos %20\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n        category\r\n    )}&limit=10&api_key=hOA4VFJ3PcxH0GpR1XLPszUZVbBU0Gju`;\r\n\r\n    // 3. Llamar al endpoint\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    // 4. Filtrar la info que viene de data a lo que se necesita mostrar .map crea un nuevo arreglo con el resultado de lo solicitado\r\n    const gifs = data.map((img) => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url,\r\n            // images? = el ? asegura que vengan imagenes\r\n        };\r\n    });\r\n\r\n    return gifs;\r\n};\r\n","//rafc\r\nimport React from 'react'\r\n\r\nexport const GifGridItem = ( { title, url} ) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src = { url } alt = { title } />\r\n            <p> Nombre: {title} </p>\r\n        </div>\r\n    )\r\n}\r\n","//rafc\r\nimport React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n//recibe la categoria y la pinta en el html\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { data:images, loading } = useFetchGifs( category );\r\n\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\" > { category } </h3>\r\n\r\n            { loading && <p className=\"animate__animated animate__flash\">Cargando</p> }\r\n\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map( img => (\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            { ...img }\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport { getGifts } from '../helpers/getGifs';\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    \r\n    const [state, setState] = useState({\r\n        // 1. Estado inicial será un objeto que tendra un arreglo que estara vacio (data)\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n\r\n        // 1. Petición a las imagenes. Llamar al helper\r\n        getGifts( category )\r\n            .then( imgs => {\r\n                    \r\n                    setState({\r\n                        data: imgs,\r\n                        loading: false\r\n                    });\r\n\r\n            })\r\n\r\n    }, [ category ]) //Se agrega como segundo argumento la categoria para que se ejecute solo cuando cambie\r\n\r\n    return state; // { data:[], loading: true }\r\n\r\n} ","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n//rafc\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    // Crear lista de categorias\r\n    const [categories, setCategories] = useState(['Tokyo Revengers']);\r\n\r\n    // Tarea agregar más elementos al arreglo\r\n\r\n    // const handleAdd = () => {\r\n    //     //operador spread para agregar un elemento al arreglo\r\n    //     setCategories([...categories, 'Boruto']);\r\n    //     setCategories( cats => [ ..cats, 'Boturo' ] );\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2> App Gifs - Api GIPHY</h2>\r\n            <AddCategory setCategories = { setCategories } />\r\n            <hr />\r\n\r\n            {/* Mostrar categorias en lista ordenada */}\r\n            <ol>\r\n                {\r\n                    categories.map( category =>(\r\n                        <GifGrid\r\n                            key = { category }\r\n                            category = { category }\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}